[project]
name = "nanobricks"
version = "0.1.0"
description = "Antifragile code components that compose like Lego bricks"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Jan Kothyson", email = "jan@example.com"},
]
dependencies = [
    "typing-extensions>=4.8.0",
    "beartype>=0.16.0",
    "tomli>=2.0.1;python_version<'3.13'",
    "jupyter>=1.1.1",
    "fastapi>=0.115.12",
    "typer>=0.15.4",
    "uvicorn>=0.34.2",
    "rich>=14.0.0",
    "asyncio>=3.4.3",
    "ruff>=0.11.11",
    "opentelemetry-api>=1.33.1",
    "opentelemetry-sdk>=1.33.1",
    "opentelemetry-instrumentation>=0.54b1",
    "opentelemetry-exporter-otlp>=1.33.1",
    "mcp>=1.9.1",
    "jsonschema>=4.23.0",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
    "aiohttp>=3.9.0",
    "toml>=0.10.2",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

[project.scripts]
nanobrick = "nanobricks.cli.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.3.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/nanobricks"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = """
    --import-mode=importlib
    --cov=nanobricks
    --cov-report=term
    --cov-report=xml
    --cov-report=html
"""

[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src"]
extend-exclude = ["__pycache__", "*.pyc", "*.egg-info"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py
"tests/**" = ["S101"]     # Allow assert in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
]
