version: '3'

silent: true

# Development utilities for working with dependent projects
# This file is meant to be included in the main Taskfile.yml

tasks:
  # Project linking tasks
  project:link:
    desc: Create a symbolic link to a project that uses Nanobricks
    summary: |
      Link a project that uses Nanobricks for easier development.
      The project will be linked in the dependents/ directory.
      
      Usage:
        task dev:project:link PATH=/path/to/your/project
        task dev:project:link PATH=../nano-scorm
    vars:
      PROJECT_PATH: '{{.PATH}}'
      PROJECT_NAME:
        sh: basename "{{.PROJECT_PATH}}"
      LINK_DIR: 'dependents'
      LINK_PATH: '{{.LINK_DIR}}/{{.PROJECT_NAME}}'
      # Always resolve to absolute path for consistent symlink creation
      ABSOLUTE_PROJECT_PATH:
        sh: |
          if [ -d "{{.PROJECT_PATH}}" ]; then
            cd "{{.PROJECT_PATH}}" && pwd
          else
            echo "{{.PROJECT_PATH}}"
          fi
      ABSOLUTE_LINK_DIR:
        sh: cd "{{.ROOT_DIR}}" && pwd
    cmds:
      - |
        if [ -z "{{.PROJECT_PATH}}" ]; then
          echo "‚ùå Please specify the project PATH"
          echo "Usage - task dev:project:link PATH=/path/to/project"
          exit 1
        fi
      - |
        if [ ! -d "{{.PROJECT_PATH}}" ]; then
          echo "‚ùå Project directory not found - {{.PROJECT_PATH}}"
          exit 1
        fi
      - mkdir -p {{.LINK_DIR}}
      - |
        if [ -L "{{.LINK_PATH}}" ]; then
          echo "‚ö†Ô∏è  Link already exists - {{.LINK_PATH}}"
          echo "   Removing old link..."
          rm "{{.LINK_PATH}}"
        fi
      - |
        # Create symlink with absolute path
        echo "üîó Creating symlink..."
        echo "   Source - {{.ABSOLUTE_PROJECT_PATH}}"
        echo "   Target - {{.ABSOLUTE_LINK_DIR}}/{{.LINK_PATH}}"
        ln -s "{{.ABSOLUTE_PROJECT_PATH}}" "{{.LINK_PATH}}"
      - |
        # Verify the symlink was created correctly
        if [ -L "{{.LINK_PATH}}" ] && [ -d "{{.LINK_PATH}}" ]; then
          echo "‚úÖ Successfully linked {{.PROJECT_NAME}}"
          echo "   Absolute path - {{.ABSOLUTE_PROJECT_PATH}}"
          echo "   Symlink path - {{.ABSOLUTE_LINK_DIR}}/{{.LINK_PATH}}"
        else
          echo "‚ùå Failed to create valid symlink"
          exit 1
        fi

  project:unlink:
    desc: Remove a symbolic link to a project
    summary: |
      Remove a previously created project link.
      
      Usage:
        task dev:project:unlink NAME=nano-scorm
    vars:
      PROJECT_NAME: '{{.NAME}}'
      LINK_DIR: 'dependents'
      LINK_PATH: '{{.LINK_DIR}}/{{.PROJECT_NAME}}'
    cmds:
      - |
        if [ -z "{{.PROJECT_NAME}}" ]; then
          echo "‚ùå Please specify the project NAME"
          echo "Usage - task dev:project:unlink NAME=project-name"
          exit 1
        fi
      - |
        if [ ! -L "{{.LINK_PATH}}" ]; then
          echo "‚ùå Link not found - {{.LINK_PATH}}"
          exit 1
        fi
      - rm "{{.LINK_PATH}}"
      - echo "‚úÖ Unlinked {{.PROJECT_NAME}}"

  project:list:
    desc: List all dependent projects
    vars:
      LINK_DIR: 'dependents'
    cmds:
      - |
        if [ ! -d "{{.LINK_DIR}}" ] || [ -z "$(ls -A {{.LINK_DIR}} 2>/dev/null)" ]; then
          echo "üì≠ No dependent projects found"
          exit 0
        fi
      - echo "üìÅ Dependent projects (showing absolute paths)"
      - |
        for link in {{.LINK_DIR}}/*; do
          if [ -L "$link" ]; then
            name=$(basename "$link")
            # Get the raw symlink target
            raw_target=$(readlink "$link")
            # Get the absolute path of the target
            if [ -d "$link" ]; then
              abs_target=$(cd "$link" && pwd)
              echo "   ‚úÖ $name"
              echo "      Symlink  - $raw_target"
              echo "      Resolved - $abs_target"
            else
              echo "   ‚ùå $name"
              echo "      Symlink  - $raw_target (broken link)"
            fi
          fi
        done

  # Quick check tasks
  check:all:
    desc: Run all development checks (lint, typecheck, test)
    cmds:
      - task: dev:lint
      - task: dev:typecheck
      - task: dev:test

  check:quick:
    desc: Run quick checks (lint only)
    cmds:
      - task: dev:lint

  # Watch tasks for development
  watch:test:
    desc: Watch files and run tests on change
    cmds:
      - watchexec -e py -w src -w tests -- uv run pytest tests/ -v

  watch:docs:
    desc: Watch and rebuild documentation on change
    cmds:
      - task: docs:preview

  # Claude Code integration tasks
  claude:understand:dependent:
    desc: Have Claude Code understand a dependent project's codebase
    summary: |
      Use Claude Code to analyze and understand a dependent project.
      This creates a comprehensive understanding of how the project uses Nanobricks.
      
      Usage:
        task dev:claude:understand:dependent NAME=nano-scorm
    vars:
      PROJECT_NAME: '{{.NAME}}'
      DEPENDENT_PATH: 'dependents/{{.PROJECT_NAME}}'
      ABSOLUTE_DEPENDENT_PATH:
        sh: |
          if [ -L "dependents/{{.PROJECT_NAME}}" ]; then
            cd "dependents/{{.PROJECT_NAME}}" && pwd
          else
            echo "dependents/{{.PROJECT_NAME}}"
          fi
    cmds:
      - |
        if [ -z "{{.PROJECT_NAME}}" ]; then
          echo "‚ùå Please specify the dependent project NAME"
          echo "Usage - task dev:claude:understand:dependent NAME=project-name"
          exit 1
        fi
      - |
        if [ ! -d "{{.DEPENDENT_PATH}}" ]; then
          echo "‚ùå Dependent project not found - {{.DEPENDENT_PATH}}"
          echo "üí° Available dependents:"
          ls -1 dependents/ 2>/dev/null || echo "   (none)"
          exit 1
        fi
      - |
        echo "ü§ñ Asking Claude Code to understand {{.PROJECT_NAME}}..."
        echo "   Project path - {{.ABSOLUTE_DEPENDENT_PATH}}"
        cd "{{.ABSOLUTE_DEPENDENT_PATH}}" && claude -p "Please analyze and understand this codebase. Focus on: 1) Overall project structure and purpose, 2) How it uses Nanobricks framework, 3) Key components and their interactions, 4) Any patterns or best practices used. Provide a comprehensive summary."

  claude:understand:nanobricks:
    desc: Have Claude Code understand the Nanobricks framework (from dependent's perspective)
    summary: |
      Use Claude Code to analyze the upstream Nanobricks framework.
      Run this from within a dependent project to understand the parent framework.
      
      Usage (from within a dependent project):
        task claude:understand:nanobricks
    vars:
      NANOBRICKS_PATH: '{{.NANOBRICKS_PATH | default "../../"}}'
    cmds:
      - |
        if [ ! -d "{{.NANOBRICKS_PATH}}/src/nanobricks" ]; then
          echo "‚ùå Nanobricks not found at {{.NANOBRICKS_PATH}}"
          echo "üí° Set NANOBRICKS_PATH if Nanobricks is in a different location"
          echo "   Example: task claude:understand:nanobricks NANOBRICKS_PATH=/path/to/nanobricks"
          exit 1
        fi
      - |
        echo "ü§ñ Asking Claude Code to understand Nanobricks framework..."
        claude -p "Please analyze the Nanobricks framework at {{.NANOBRICKS_PATH}}. Focus on: 1) Core concepts and architecture, 2) Main components (transformers, validators, skills, etc.), 3) How to create and compose nanobricks, 4) Best practices and patterns. Provide a comprehensive overview that would help me use this framework effectively in my project."

  claude:compare:usage:
    desc: Compare how different dependents use Nanobricks
    summary: |
      Use Claude Code to analyze and compare how multiple dependent projects
      use the Nanobricks framework.
      
      Usage:
        task dev:claude:compare:usage PROJECTS="nano-scorm,other-project"
    vars:
      PROJECTS: '{{.PROJECTS}}'
    cmds:
      - |
        if [ -z "{{.PROJECTS}}" ]; then
          echo "‚ùå Please specify PROJECTS as comma-separated list"
          echo "Usage - task dev:claude:compare:usage PROJECTS=\"project1,project2\""
          exit 1
        fi
      - |
        echo "ü§ñ Analyzing usage patterns across dependents..."
        projects="{{.PROJECTS}}"
        IFS=',' read -ra PROJECT_ARRAY <<< "$projects"
        
        prompt="Please analyze and compare how these Nanobricks dependent projects use the framework:\n\n"
        
        for project in "${PROJECT_ARRAY[@]}"; do
          project=$(echo "$project" | xargs)  # trim whitespace
          if [ -d "dependents/$project" ]; then
            prompt="$prompt- $project (at dependents/$project)\n"
          else
            echo "‚ö†Ô∏è  Warning: $project not found in dependents/"
          fi
        done
        
        prompt="$prompt\nFocus on: 1) Different usage patterns, 2) Common practices, 3) Unique implementations, 4) Lessons that can be learned from each approach."
        
        claude -p "$prompt"