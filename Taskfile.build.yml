version: '3'

silent: true

# Distribution and deployment tasks for Nanobricks
# This file is meant to be included in the main Taskfile.yml

tasks:
  # Build tasks
  package:build:
    desc: Build distribution packages (wheel and sdist)
    cmds:
      - echo "🏗️  Building Nanobricks distribution packages..."
      - rm -rf dist/ build/ *.egg-info
      - python -m pip install --upgrade build wheel
      - python -m build
      - echo "✅ Build complete! Packages in dist/"
    sources:
      - src/**/*.py
      - pyproject.toml
    generates:
      - dist/*.whl
      - dist/*.tar.gz

  package:clean:
    desc: Clean distribution artifacts
    cmds:
      - rm -rf dist/ build/ *.egg-info
      - echo "✅ Cleaned distribution artifacts"

  # Installation tasks
  package:install:local:
    desc: Install Nanobricks in another project (editable)
    summary: |
      Install Nanobricks in editable mode in another project.
      Usage: task dist:package:install:local PROJECT_PATH=/path/to/project
    vars:
      PROJECT_PATH: '{{.PROJECT_PATH | default "."}}'
    cmds:
      - |
        if [ "{{.PROJECT_PATH}}" = "." ]; then
          echo "❌ Please specify PROJECT_PATH"
          echo "Usage - task dist:package:install:local PROJECT_PATH=/path/to/your/project"
          exit 1
        fi
      - echo "📦 Installing Nanobricks in {{.PROJECT_PATH}}"
      - cd {{.PROJECT_PATH}} && uv pip install -e {{.ROOT_DIR}}
      - echo "✅ Installed successfully!"

  package:install:wheel:
    desc: Install Nanobricks from wheel in another project
    summary: |
      Install Nanobricks from built wheel in another project.
      Usage: task dist:package:install:wheel PROJECT_PATH=/path/to/project
    deps: [package:build]
    vars:
      PROJECT_PATH: '{{.PROJECT_PATH | default "."}}'
      WHEEL_FILE: '{{.ROOT_DIR}}/dist/nanobricks-0.1.0-py3-none-any.whl'
    cmds:
      - |
        if [ "{{.PROJECT_PATH}}" = "." ]; then
          echo "❌ Please specify PROJECT_PATH"
          echo "Usage - task dist:package:install:wheel PROJECT_PATH=/path/to/your/project"
          exit 1
        fi
      - echo "📦 Installing Nanobricks wheel in {{.PROJECT_PATH}}"
      - cd {{.PROJECT_PATH}} && uv pip install {{.WHEEL_FILE}}
      - echo "✅ Installed successfully!"

  # Project creation tasks
  project:create:
    desc: Create a new project using Nanobricks (manual setup)
    summary: |
      Generate a new project structure with Nanobricks as dependency.
      
      Usage from Nanobricks directory:
        task dist:project:create NAME=myproject DIR=/path/to/parent
      
      Usage from anywhere:
        task -d /path/to/nanobricks dist:project:create NAME=myproject DIR=/path/to/parent
      
      Note: DIR is required to avoid creating the project inside Nanobricks.
    vars:
      PROJECT_NAME: '{{.NAME}}'
      PARENT_DIR: '{{.DIR}}'
      PROJECT_PATH: '{{.PARENT_DIR}}/{{.PROJECT_NAME}}'
    cmds:
      - |
        if [ -z "{{.PROJECT_NAME}}" ]; then
          echo "❌ Please specify project NAME"
          echo "Usage - task dist:project:create NAME=myproject DIR=/path/to/parent"
          exit 1
        fi
        if [ -z "{{.PARENT_DIR}}" ]; then
          echo "❌ Please specify parent DIR to avoid creating project inside Nanobricks"
          echo "Usage - task dist:project:create NAME=myproject DIR=/path/to/parent"
          exit 1
        fi
      - echo "🚀 Creating new Nanobricks project - {{.PROJECT_NAME}}"
      - mkdir -p {{.PROJECT_PATH}}/src/{{.PROJECT_NAME}} {{.PROJECT_PATH}}/tests {{.PROJECT_PATH}}/docs
      - task: create:pyproject
        vars:
          PROJECT_NAME: '{{.PROJECT_NAME}}'
          PROJECT_PATH: '{{.PROJECT_PATH}}'
          ROOT_DIR: '{{.ROOT_DIR}}'
      - task: create:structure
        vars:
          PROJECT_NAME: '{{.PROJECT_NAME}}'
          PROJECT_PATH: '{{.PROJECT_PATH}}'
          ROOT_DIR: '{{.ROOT_DIR}}'
      - echo "✅ Project created at {{.PROJECT_PATH}}"
      - echo "Next steps -"
      - echo "  1. cd {{.PROJECT_PATH}}"
      - echo "  2. uv venv"
      - echo "  3. source .venv/bin/activate  # On Windows .venv\Scripts\activate"
      - echo "  4. uv pip install -e ."
      - echo "  5. task dev:test"

  project:create:uv:
    desc: Create a new project using uv init
    summary: |
      Generate a new project using uv init with Nanobricks as dependency.
      
      Usage from Nanobricks directory:
        task dist:project:create:uv NAME=myproject DIR=/path/to/parent
      
      Usage from anywhere:
        task -d /path/to/nanobricks dist:project:create:uv NAME=myproject DIR=/path/to/parent
      
      Note: DIR is required to avoid creating the project inside Nanobricks.
    vars:
      PROJECT_NAME: '{{.NAME}}'
      PARENT_DIR: '{{.DIR}}'
      PROJECT_PATH:
        sh: echo "{{.PARENT_DIR}}/{{.PROJECT_NAME}}" | sed 's|//|/|g'
      PACKAGE_NAME:
        sh: echo "{{.PROJECT_NAME}}" | tr '-' '_'
    cmds:
      - |
        if [ -z "{{.PROJECT_NAME}}" ]; then
          echo "❌ Please specify project NAME"
          echo "Usage - task dist:project:create:uv NAME=myproject DIR=/path/to/parent"
          exit 1
        fi
        if [ -z "{{.PARENT_DIR}}" ]; then
          echo "❌ Please specify parent DIR to avoid creating project inside Nanobricks"
          echo "Usage - task dist:project:create:uv NAME=myproject DIR=/path/to/parent"
          exit 1
        fi
      - echo "🚀 Creating new Nanobricks project with uv init - {{.PROJECT_NAME}}"
      - cd {{.PARENT_DIR}} && uv init {{.PROJECT_NAME}} --package --python 3.13
      - task: update:pyproject:for:uv
        vars:
          PROJECT_NAME: '{{.PROJECT_NAME}}'
          PROJECT_PATH: '{{.PROJECT_PATH}}'
          ROOT_DIR: '{{.ROOT_DIR}}'
      - task: create:structure:uv
        vars:
          PROJECT_NAME: '{{.PROJECT_NAME}}'
          PACKAGE_NAME: '{{.PACKAGE_NAME}}'
          PROJECT_PATH: '{{.PROJECT_PATH}}'
          ROOT_DIR: '{{.ROOT_DIR}}'
      - echo "📦 Creating virtual environment with Python 3.13..."
      - cd {{.PROJECT_PATH}} && unset VIRTUAL_ENV && uv venv --python 3.13
      - echo "📥 Installing dependencies..."
      - cd {{.PROJECT_PATH}} && unset VIRTUAL_ENV && uv sync
      - |
        echo "✅ Project created at {{.PROJECT_PATH}}"
        echo "Next steps -"
        echo "  1. cd {{.PROJECT_PATH}}"
        echo "  2. source .venv/bin/activate  # On Windows - .venv/Scripts/activate"
        echo "  3. task dev:test"
        echo "     or"
        echo "  3. uv run task dev:test  # Without activation"

  # Verification
  package:verify:
    desc: Verify Nanobricks installation in current environment
    cmds:
      - uv run python {{.ROOT_DIR}}/verify-installation.py

  # Repository management
  repo:create:local:
    desc: Set up local package repository
    summary: |
      Create a local package repository for Nanobricks.
      Useful for pip install --find-links
    deps: [package:build]
    vars:
      REPO_PATH: '{{.HOME}}/.nanobricks-repo'
    cmds:
      - mkdir -p {{.REPO_PATH}}
      - cp dist/* {{.REPO_PATH}}/
      - echo "📦 Local repository created at {{.REPO_PATH}}"
      - echo "Install with - uv pip install nanobricks --find-links file://{{.REPO_PATH}}"

  # Publishing tasks
  publish:test:
    desc: Test package publishing (dry run)
    deps: [package:build]
    cmds:
      - uv pip install --upgrade twine
      - twine check dist/*
      - echo "✅ Package validation passed!"
      - echo "To publish for real, use - task dist:publish:pypi"

  publish:pypi:
    desc: Publish to PyPI (requires credentials)
    deps: [package:build]
    cmds:
      - |
        echo "⚠️  This will publish to PyPI. Are you sure? (y/N)"
        read -r response
        if [ "$response" != "y" ]; then
          echo "Cancelled"
          exit 1
        fi
      - uv pip install --upgrade twine
      - twine upload dist/*

  # Internal helper tasks
  create:pyproject:
    internal: true
    cmds:
      - |
        cat > {{.PROJECT_PATH}}/pyproject.toml << 'EOF'
        [project]
        name = "{{.PROJECT_NAME}}"
        version = "0.1.0"
        description = "A project built with Nanobricks"
        readme = "README.md"
        authors = [{name = "Your Name", email = "your.email@example.com"}]
        requires-python = ">=3.13"
        dependencies = [
            "nanobricks @ file://{{.ROOT_DIR}}",
        ]
        
        [project.optional-dependencies]
        dev = [
            "pytest>=8.0",
            "pytest-asyncio>=0.23",
            "pytest-cov>=5.0",
            "ruff>=0.7.0",
            "mypy>=1.9",
        ]
        
        [build-system]
        requires = ["hatchling"]
        build-backend = "hatchling.build"
        
        [tool.hatch.build.targets.wheel]
        packages = ["src/{{.PROJECT_NAME}}"]
        
        [tool.uv]
        dev-dependencies = [
            "pytest>=8.0",
            "pytest-asyncio>=0.23",
            "pytest-cov>=5.0",
            "ruff>=0.7.0",
            "mypy>=1.9",
        ]
        
        [tool.ruff]
        target-version = "py313"
        line-length = 88
        
        [tool.mypy]
        python_version = "3.13"
        strict = true
        
        [tool.pytest.ini_options]
        asyncio_mode = "auto"
        testpaths = ["tests"]
        EOF

  update:pyproject:for:uv:
    internal: true
    cmds:
      - |
        # Update the pyproject.toml created by uv init
        # First, add the nanobricks dependency to the dependencies array
        sed -i '' 's|dependencies = \[\]|dependencies = [\n    "nanobricks @ file://{{.ROOT_DIR}}",\n]|' {{.PROJECT_PATH}}/pyproject.toml
        
        # Add uv dev-dependencies
        cat >> {{.PROJECT_PATH}}/pyproject.toml << 'EOF'
        
        [tool.hatch.metadata]
        allow-direct-references = true
        
        [tool.uv]
        dev-dependencies = [
            "pytest>=8.0",
            "pytest-asyncio>=0.23",
            "pytest-cov>=5.0",
            "ruff>=0.7.0",
            "mypy>=1.9",
        ]
        
        [tool.ruff]
        target-version = "py313"
        line-length = 88
        
        [tool.mypy]
        python_version = "3.13"
        strict = true
        
        [tool.pytest.ini_options]
        asyncio_mode = "auto"
        testpaths = ["tests"]
        EOF

  create:structure:
    internal: true
    cmds:
      - |
        # Create main module
        cat > {{.PROJECT_PATH}}/src/{{.PROJECT_NAME}}/__init__.py << 'EOF'
        """{{.PROJECT_NAME}} - Built with Nanobricks."""
        
        from nanobricks import NanobrickSimple, Pipeline
        
        __version__ = "0.1.0"
        
        
        class ExampleBrick(NanobrickSimple[str, str]):
            """An example nanobrick."""
            
            async def invoke(self, input: str) -> str:
                return f"Processed: {input}"
        
        
        __all__ = ["ExampleBrick"]
        EOF
      - |
        # Create test file
        cat > {{.PROJECT_PATH}}/tests/test_example.py << 'EOF'
        """Example tests."""
        
        import pytest
        from {{.PROJECT_NAME}} import ExampleBrick
        
        
        @pytest.mark.asyncio
        async def test_example_brick():
            brick = ExampleBrick()
            result = await brick.invoke("test")
            assert result == "Processed: test"
        EOF
      - |
        # Create Taskfile
        cat > {{.PROJECT_PATH}}/Taskfile.yml << EOF
        version: '3'
        
        vars:
          NANOBRICKS_PATH: '{{.ROOT_DIR}}'
          LINK_PATH: 'linked-nanobricks'
        
        tasks:
          dev:test:
            desc: Run tests
            cmds:
              - uv run pytest tests/ -v
          
          dev:lint:
            desc: Run linters
            cmds:
              - uv run ruff check src/ tests/
              - uv run mypy src/
          
          dev:format:
            desc: Format code
            cmds:
              - uv run ruff format src/ tests/
          
          link:nanobricks:
            desc: Create a symbolic link to Nanobricks source
            cmds:
              - |
                if [ -L "{{.LINK_PATH}}" ]; then
                  echo "⚠️  Link already exists - {{.LINK_PATH}}"
                  echo "   Removing old link..."
                  rm "{{.LINK_PATH}}"
                fi
              - ln -s "{{.NANOBRICKS_PATH}}" "{{.LINK_PATH}}"
              - echo "✅ Linked Nanobricks -> {{.LINK_PATH}}"
              - echo "📁 You can now access Nanobricks source at {{.LINK_PATH}}"
          
          unlink:nanobricks:
            desc: Remove the symbolic link to Nanobricks
            cmds:
              - |
                if [ ! -L "{{.LINK_PATH}}" ]; then
                  echo "❌ No Nanobricks link found"
                  exit 1
                fi
              - rm "{{.LINK_PATH}}"
              - echo "✅ Unlinked Nanobricks"
          
          sync:nanobricks:
            desc: Update to latest Nanobricks changes
            cmds:
              - echo "🔄 Syncing with latest Nanobricks changes..."
              - uv sync
              - echo "✅ Sync complete!"
          
          claude:understand:nanobricks:
            desc: Have Claude Code understand the upstream Nanobricks framework
            vars:
              NANOBRICKS_PATH: '{{.NANOBRICKS_PATH}}'
            cmds:
              - |
                echo "🤖 Asking Claude Code to understand Nanobricks framework..."
                claude -p "Please analyze the Nanobricks framework at {{.NANOBRICKS_PATH}}. Focus on: 1) Core concepts and architecture, 2) Main components (transformers, validators, skills, etc.), 3) How to create and compose nanobricks, 4) Best practices and patterns. Provide a comprehensive overview that would help me use this framework effectively in my project."
        EOF
      - |
        # Create README
        cat > {{.PROJECT_PATH}}/README.md << 'EOF'
        # {{.PROJECT_NAME}}
        
        Built with [Nanobricks](https://github.com/yourusername/nanobricks).
        
        ## Setup with uv
        
        ```bash
        # If you haven't already
        uv venv
        uv sync
        ```
        
        ## Usage
        
        ```python
        from {{.PROJECT_NAME}} import ExampleBrick
        
        brick = ExampleBrick()
        result = await brick.invoke("hello")
        ```
        
        ## Development
        
        ```bash
        # Run tests
        uv run task dev:test
        # Or directly
        uv run pytest
        
        # Run linters
        uv run task dev:lint
        
        # Format code  
        uv run task dev:format
        ```
        EOF
      - |
        # Create .gitignore
        cat > {{.PROJECT_PATH}}/.gitignore << 'EOF'
        __pycache__/
        *.py[cod]
        .venv/
        venv/
        .env
        .coverage
        htmlcov/
        .pytest_cache/
        .mypy_cache/
        .ruff_cache/
        dist/
        build/
        *.egg-info/
        .DS_Store
        uv.lock
        linked-nanobricks
        EOF

  create:structure:uv:
    internal: true
    cmds:
      - |
        # Create main module (uv uses underscores in package names)
        cat > {{.PROJECT_PATH}}/src/{{.PACKAGE_NAME}}/__init__.py << 'EOF'
        """{{.PROJECT_NAME}} - Built with Nanobricks."""
        
        from nanobricks import NanobrickSimple, Pipeline
        
        __version__ = "0.1.0"
        
        
        class ExampleBrick(NanobrickSimple[str, str]):
            """An example nanobrick."""
            
            async def invoke(self, input: str) -> str:
                return f"Processed: {input}"
        
        
        __all__ = ["ExampleBrick"]
        EOF
      - |
        # Create test directory if it doesn't exist
        mkdir -p {{.PROJECT_PATH}}/tests
      - |
        # Create test file
        cat > {{.PROJECT_PATH}}/tests/test_example.py << 'EOF'
        """Example tests."""
        
        import pytest
        from {{.PACKAGE_NAME}} import ExampleBrick
        
        
        @pytest.mark.asyncio
        async def test_example_brick():
            brick = ExampleBrick()
            result = await brick.invoke("test")
            assert result == "Processed: test"
        EOF
      - |
        # Create Taskfile
        cat > {{.PROJECT_PATH}}/Taskfile.yml << EOF
        version: '3'
        
        vars:
          NANOBRICKS_PATH: '{{.ROOT_DIR}}'
          LINK_PATH: 'linked-nanobricks'
        
        tasks:
          dev:test:
            desc: Run tests
            cmds:
              - uv run pytest tests/ -v
          
          dev:lint:
            desc: Run linters
            cmds:
              - uv run ruff check src/ tests/
              - uv run mypy src/
          
          dev:format:
            desc: Format code
            cmds:
              - uv run ruff format src/ tests/
          
          link:nanobricks:
            desc: Create a symbolic link to Nanobricks source
            cmds:
              - |
                if [ -L "{{.LINK_PATH}}" ]; then
                  echo "⚠️  Link already exists - {{.LINK_PATH}}"
                  echo "   Removing old link..."
                  rm "{{.LINK_PATH}}"
                fi
              - ln -s "{{.NANOBRICKS_PATH}}" "{{.LINK_PATH}}"
              - echo "✅ Linked Nanobricks -> {{.LINK_PATH}}"
              - echo "📁 You can now access Nanobricks source at {{.LINK_PATH}}"
          
          unlink:nanobricks:
            desc: Remove the symbolic link to Nanobricks
            cmds:
              - |
                if [ ! -L "{{.LINK_PATH}}" ]; then
                  echo "❌ No Nanobricks link found"
                  exit 1
                fi
              - rm "{{.LINK_PATH}}"
              - echo "✅ Unlinked Nanobricks"
          
          sync:nanobricks:
            desc: Update to latest Nanobricks changes
            cmds:
              - echo "🔄 Syncing with latest Nanobricks changes..."
              - uv sync
              - echo "✅ Sync complete!"
          
          claude:understand:nanobricks:
            desc: Have Claude Code understand the upstream Nanobricks framework
            vars:
              NANOBRICKS_PATH: '{{.NANOBRICKS_PATH}}'
            cmds:
              - |
                echo "🤖 Asking Claude Code to understand Nanobricks framework..."
                claude -p "Please analyze the Nanobricks framework at {{.NANOBRICKS_PATH}}. Focus on: 1) Core concepts and architecture, 2) Main components (transformers, validators, skills, etc.), 3) How to create and compose nanobricks, 4) Best practices and patterns. Provide a comprehensive overview that would help me use this framework effectively in my project."
        EOF
      - |
        # Update README
        cat > {{.PROJECT_PATH}}/README.md << 'EOF'
        # {{.PROJECT_NAME}}
        
        Built with [Nanobricks](https://github.com/yourusername/nanobricks).
        
        ## Setup with uv
        
        ```bash
        # If you haven't already
        uv sync
        ```
        
        ## Usage
        
        ```python
        from {{.PACKAGE_NAME}} import ExampleBrick
        
        brick = ExampleBrick()
        result = await brick.invoke("hello")
        ```
        
        ## Development
        
        ```bash
        # Run tests
        uv run task dev:test
        # Or directly
        uv run pytest
        
        # Run linters
        uv run task dev:lint
        
        # Format code  
        uv run task dev:format
        ```
        EOF
      - |
        # Update .gitignore if needed
        if ! grep -q "uv.lock" {{.PROJECT_PATH}}/.gitignore 2>/dev/null; then
          echo "uv.lock" >> {{.PROJECT_PATH}}/.gitignore
        fi
        if ! grep -q "linked-nanobricks" {{.PROJECT_PATH}}/.gitignore 2>/dev/null; then
          echo "linked-nanobricks" >> {{.PROJECT_PATH}}/.gitignore
        fi