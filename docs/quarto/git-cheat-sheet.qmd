---
title: "Git Cheat Sheet"
description: "Problem >> Solution style guide for common Git operations, inspired by 'Oh Shit, Git?!'"
---

## Introduction

This cheat sheet provides quick solutions to common Git problems, with a focus on managing `.gitignore` and cleaning up repository history. Each entry follows a "Problem >> Solution" format for quick reference.

## Managing .gitignore

### Problem: I committed files that should be in .gitignore

**Solution**: Remove them from tracking but keep local copies

```bash
# Remove file from tracking but keep it locally
git rm --cached path/to/file

# Remove directory from tracking but keep it locally
git rm -r --cached path/to/directory

# Remove all files matching .gitignore patterns
git rm -r --cached .
git add .
git commit -m "chore: remove ignored files from tracking"
```

### Problem: I need to remove ALL gitignored files from history

**Solution**: Use BFG Repo-Cleaner (recommended) or git-filter-repo

:::{.callout-warning}
**‚ö†Ô∏è Warning**: This rewrites history! Coordinate with your team and backup first.
:::

#### Method 1: BFG Repo-Cleaner (Fastest & Safest)

```bash
# 1. Install BFG
brew install bfg  # macOS
# or download from https://rtyley.github.io/bfg-repo-cleaner/

# 2. Create a fresh mirror clone
git clone --mirror https://github.com/user/repo.git

# 3. Generate list of files to remove from .gitignore
cd repo.git
git ls-files -i --exclude-standard > ../files-to-remove.txt
cd ..

# 4. Run BFG to remove each file
while IFS= read -r file; do
  java -jar bfg.jar --delete-files "$file" repo.git
done < files-to-remove.txt

# 5. Clean up the repository
cd repo.git
git reflog expire --expire=now --all
git gc --prune=now --aggressive

# 6. Push changes (force required)
git push --force --all
git push --force --tags
```

#### Method 2: git-filter-repo (Modern Alternative)

```bash
# 1. Install git-filter-repo
pip install git-filter-repo

# 2. Get list of files matching .gitignore
git ls-files -i --exclude-standard > files-to-remove.txt

# 3. Remove files from history
git filter-repo --invert-paths --paths-from-file files-to-remove.txt

# 4. Force push
git push origin --force --all
git push origin --force --tags
```

### Problem: I want to check what files would be removed by .gitignore cleanup

**Solution**: Dry run to see affected files

```bash
# List all tracked files that match .gitignore patterns
git ls-files -i --exclude-standard

# Count how many files would be affected
git ls-files -i --exclude-standard | wc -l

# Show file sizes of ignored tracked files
git ls-files -i --exclude-standard | xargs du -h
```

## Common .gitignore Patterns

### Problem: I don't know what to put in .gitignore

**Solution**: Common patterns by file type

```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
.Python
env/
venv/
.venv
*.egg-info/
dist/
.pytest_cache/
.coverage
htmlcov/
.mypy_cache/
.ruff_cache/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# Environment
.env
.env.*
!.env.example

# Build artifacts
build/
dist/
*.egg-info/
.eggs/

# Documentation
docs/_build/
docs/_site/
site/

# Testing
.tox/
.coverage
coverage.xml
*.cover
.hypothesis/
pytest_cache/

# Temporary files
*.tmp
*.temp
*.log
tmp/
temp/
```

## Repository Cleanup

### Problem: My repository is bloated with large files

**Solution**: Find and remove large files from history

```bash
# Find large files in history
git rev-list --objects --all | \
  git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | \
  sed -n 's/^blob //p' | \
  sort --numeric-sort --key=2 | \
  cut -c 1-12,41- | \
  $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest | \
  tail -20

# Remove specific large file with BFG
java -jar bfg.jar --strip-blobs-bigger-than 100M repo.git
```

### Problem: I accidentally committed secrets/passwords

**Solution**: Remove sensitive data immediately

```bash
# Using BFG to remove passwords
echo 'PASSWORD123' > passwords.txt
echo 'SECRET_KEY=abc123' >> passwords.txt
java -jar bfg.jar --replace-text passwords.txt repo.git

# Clean and push
cd repo.git
git reflog expire --expire=now --all
git gc --prune=now --aggressive
git push --force --all
```

:::{.callout-important}
**üîê Security Note**: After removing secrets from history, immediately:
1. Rotate all affected credentials
2. Audit access logs
3. Notify your security team
:::

## Prevention Tips

### Problem: How do I prevent committing ignored files?

**Solution**: Use pre-commit hooks

```bash
# Create .git/hooks/pre-commit
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/sh
# Check for files that should be ignored
ignored=$(git ls-files -i --exclude-standard)
if [ -n "$ignored" ]; then
  echo "Error: You're trying to commit files that should be ignored:"
  echo "$ignored"
  echo "Remove them with: git rm --cached <file>"
  exit 1
fi
EOF

chmod +x .git/hooks/pre-commit
```

### Problem: I want to regularly audit my repo for ignored files

**Solution**: Create a maintenance script

```bash
#!/bin/bash
# audit-gitignore.sh

echo "üîç Auditing repository for gitignored files..."

# Check for tracked files matching .gitignore
ignored_files=$(git ls-files -i --exclude-standard)

if [ -n "$ignored_files" ]; then
  echo "‚ö†Ô∏è  Found tracked files that match .gitignore patterns:"
  echo "$ignored_files" | head -20
  echo ""
  echo "Total: $(echo "$ignored_files" | wc -l) files"
  echo ""
  echo "To remove them from tracking, run:"
  echo "git rm -r --cached . && git add . && git commit -m 'chore: remove ignored files'"
else
  echo "‚úÖ No tracked files match .gitignore patterns"
fi

# Check repository size
echo ""
echo "üìä Repository size: $(du -sh .git | cut -f1)"
```

## Quick Reference

| Problem | Quick Solution |
|---------|---------------|
| Remove file from tracking | `git rm --cached file` |
| Remove all ignored files | `git rm -r --cached . && git add .` |
| List ignored tracked files | `git ls-files -i --exclude-standard` |
| Clean history (BFG) | `bfg --delete-files file repo.git` |
| Clean history (filter-repo) | `git filter-repo --invert-paths --path file` |
| Find large files | `git rev-list --objects --all \| sort -k2` |
| Remove secrets | `bfg --replace-text passwords.txt` |

## Resources

- [BFG Repo-Cleaner](https://rtyley.github.io/bfg-repo-cleaner/)
- [git-filter-repo](https://github.com/newren/git-filter-repo)
- [GitHub: Removing sensitive data](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository)
- [Oh Shit, Git?!](https://ohshitgit.com/)