---
title: "Developer Workflows Guide"
subtitle: "Practical workflows and best practices for Nanobricks development"
---

# Developer Workflows Guide

This guide provides practical, scenario-based workflows for common development tasks in Nanobricks. Whether you're contributing to Nanobricks, creating new projects, or managing multiple dependent projects, this guide has you covered.

## Table of Contents

- [Setting Up Your Development Environment](#setting-up-your-development-environment)
- [Daily Development Workflow](#daily-development-workflow)
- [Creating New Projects](#creating-new-projects)
- [Multi-Project Development](#multi-project-development)
- [Testing Workflows](#testing-workflows)
- [Documentation Development](#documentation-development)
- [Release Management](#release-management)
- [Advanced Workflows](#advanced-workflows)
- [Troubleshooting](#troubleshooting)
- [Extending the Task System](#extending-the-task-system)

## Setting Up Your Development Environment

### First-Time Setup

After cloning the Nanobricks repository, set up your development environment:

```bash
# Clone the repository
git clone https://github.com/your-org/nanobricks.git
cd nanobricks

# Create and activate virtual environment
uv venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install development dependencies
task core:dev:setup

# Verify everything is working
task core:dev:all
```

### IDE Configuration

For VS Code users, install recommended extensions:
- Python
- Pylance
- Ruff
- MyPy

The repository includes VS Code settings for optimal development experience.

## Daily Development Workflow

### Standard Development Cycle

Here's a typical development workflow when working on Nanobricks:

```bash
# 1. Start with a clean state
task core:dev:format    # Format code
task core:dev:lint      # Check for issues

# 2. Make your changes
# ... edit files ...

# 3. Run tests continuously (in another terminal)
task core:dev:watch:test

# 4. Before committing, run all checks
task core:dev:all

# 5. Update documentation if needed
task docs:site:preview  # Live preview while editing
```

### Quick Iteration Cycle

For rapid development:

```bash
# Terminal 1: Watch tests
task core:dev:watch:test

# Terminal 2: Watch documentation (if editing docs)
task docs:site:preview

# Terminal 3: Your regular development
```

### Pre-Commit Checklist

Before committing changes:

1. **Format code**: `task core:dev:format`
2. **Run linters**: `task core:dev:lint`
3. **Run tests**: `task core:dev:test`
4. **Check types**: `task core:dev:typecheck`
5. **Build docs**: `task docs:site:render`

Or simply run: `task core:dev:all`

## Creating New Projects

### Quick Project Creation

The fastest way to create a new project using Nanobricks:

```bash
# Using uv (recommended)
task project:scaffold:create:uv NAME=my-awesome-app DIR=~/projects

# Navigate to the project
cd ~/projects/my-awesome-app

# Activate the environment (already created by uv)
source .venv/bin/activate

# Run tests to verify setup
task dev:test
```

### Manual Project Creation

For more control over the setup:

```bash
# Create project structure
task project:scaffold:create NAME=my-app DIR=~/projects

# Navigate and set up
cd ~/projects/my-app
uv venv --python 3.13
source .venv/bin/activate
uv pip install -e .

# Verify
task dev:test
```

### Project Structure

Both methods create a project with this structure:

```
my-app/
├── src/
│   └── my_app/
│       └── __init__.py      # Example nanobrick
├── tests/
│   └── test_example.py      # Example test
├── docs/                    # Documentation directory
├── pyproject.toml          # Project configuration
├── Taskfile.yml            # Project-specific tasks
├── README.md               # Project documentation
└── .gitignore              # Git ignore file
```

## Multi-Project Development

### Scenario: Developing Nanobricks with Dependent Projects

When you're developing Nanobricks features that affect dependent projects:

```bash
# 1. Link your dependent project from Nanobricks directory
task project:link:add PATH=~/projects/my-app

# 2. List linked projects
task project:link:list

# 3. After making changes to Nanobricks, test in linked project
cd linked-projects/my-app
task dev:test

# 4. When done, unlink
task project:link:remove NAME=my-app
```

### Scenario: Working on a Project Using Nanobricks

From your project directory, link to Nanobricks source:

```bash
# Link to Nanobricks for development
task link:nanobricks

# After Nanobricks changes
task sync:nanobricks

# When done with development
task unlink:nanobricks
```

### Best Practices for Multi-Project Development

1. **Always use editable installs** during development
2. **Link projects** instead of reinstalling repeatedly
3. **Test changes** in all dependent projects before releasing
4. **Use sync commands** to update dependencies

## Testing Workflows

### Test-Driven Development (TDD)

```bash
# Start watch mode
task core:dev:watch:test

# In another terminal, write your test first
# Then implement until tests pass
```

### Running Specific Tests

```bash
# Run all tests
task core:dev:test

# Run unit tests only
task core:dev:test:unit

# Run integration tests only
task core:dev:test:integration

# Run with coverage
task core:dev:test:coverage

# Run specific test file (using pytest directly)
uv run pytest tests/unit/test_specific.py -v

# Run specific test function
uv run pytest tests/unit/test_specific.py::test_function_name -v
```

### Debugging Tests

```bash
# Run tests with debugging output
uv run pytest tests/ -vv -s

# Run with pdb on failure
uv run pytest tests/ --pdb

# Run last failed tests
uv run pytest tests/ --lf
```

## Documentation Development

### Live Documentation Development

```bash
# Start live preview server
task docs:site:preview

# The server will:
# - Auto-reload on changes
# - Show errors in the browser
# - Preserve scroll position
```

### Documentation Workflow

1. **Start preview server**: `task docs:site:preview`
2. **Edit `.qmd` files** in `docs/quarto/`
3. **Check rendering** in browser (auto-reloads)
4. **Validate build**: `task docs:site:render`
5. **Check links**: `task docs:content:validate`

### Adding New Documentation

```bash
# 1. Create new .qmd file
touch docs/quarto/my-new-guide.qmd

# 2. Add to _quarto.yml sidebar
# 3. Start preview to see it live
task docs:site:preview
```

### Publishing Documentation

```bash
# Build production version
task docs:site:render

# Publish to GitHub Pages
task docs:site:publish
```

## Release Management

### Preparing a Release

Complete release workflow:

```bash
# 1. Ensure clean working directory
git status

# 2. Run all checks
task core:dev:all

# 3. Update CHANGELOG.md
# ... edit CHANGELOG.md ...

# 4. Bump version
task version:semver:bump:patch  # or minor/major

# 5. Commit changes
task version:semver:commit

# 6. Create tag
task version:git:tag:create

# 7. Push everything
git push origin main
git push origin --tags

# 8. Build and publish
task build:package:create
task deploy:publish:pypi
```

### Version Bumping Strategy

- **Patch** (0.1.0 → 0.1.1): Bug fixes, documentation
- **Minor** (0.1.0 → 0.2.0): New features, backwards compatible
- **Major** (0.1.0 → 1.0.0): Breaking changes

## Advanced Workflows

### Creating Custom Nanobricks

```bash
# Create a new nanobrick component
task scaffold:brick:create NAME=data_processor

# This creates:
# src/data_processor/
# ├── __init__.py
# └── core.py

# Edit the generated files to implement your logic
```

### Local Package Repository

For testing package distribution:

```bash
# Build and create local repository
task build:package:create
task build:repo:create:local

# In another project, install from local repo
uv pip install nanobricks --find-links file://~/.nanobricks-repo
```

### Continuous Integration Workflow

For CI/CD pipelines:

```bash
# Run in CI environment
task core:dev:lint
task core:dev:test:coverage
task docs:site:render

# Only on main branch
task build:package:create
task deploy:publish:test
```

## Troubleshooting

### Common Issues and Solutions

#### Task Not Found

```bash
# Error: Task "dev:test" not found

# Solution: Ensure you're in the project root
pwd  # Should show nanobricks directory
ls Taskfile.yml  # Should exist
```

#### Import Errors After Changes

```bash
# Error: ImportError: cannot import name 'X' from 'nanobricks'

# Solution: Reinstall in development mode
task core:dev:setup
# Or
uv pip install -e .
```

#### Documentation Build Failures

```bash
# Error: Quarto render failed

# Solution: Check for syntax errors
task docs:dev:check

# Check specific file
quarto render docs/quarto/problem-file.qmd
```

#### Linked Project Issues

```bash
# Error: Changes not reflected in linked project

# Solution: Sync the project
cd linked-project
task sync:nanobricks
```

### Debug Mode

Run tasks with verbose output:

```bash
# Show what commands are being run
task --verbose core:dev:test

# Dry run (show what would be executed)
task --dry core:dev:test
```

## Extending the Task System

### Adding Custom Tasks

Create custom tasks following the naming convention:

```yaml
# In Taskfile.yml or a custom Taskfile

tasks:
  # Follow namespace:component:action:variant pattern
  analysis:code:complexity:
    desc: Analyze code complexity
    cmds:
      - echo "Analyzing code complexity..."
      - uv run radon cc src/ -a

  analysis:code:metrics:
    desc: Generate code metrics
    cmds:
      - echo "Generating metrics..."
      - uv run radon mi src/
```

### Task Best Practices

1. **Use silent mode**: Add `silent: true` to Taskfiles
2. **Follow naming convention**: `namespace:component:action:variant`
3. **Add descriptions**: Use `desc:` for all public tasks
4. **Handle errors**: Add preconditions and error messages
5. **Use variables**: Define reusable paths and values

### Example: Custom Development Task

```yaml
tasks:
  dev:analyze:all:
    desc: Run all code analysis tools
    cmds:
      - task: core:dev:lint
      - task: analysis:code:complexity
      - task: analysis:code:metrics
      - echo "✅ All analysis complete"
    preconditions:
      - sh: command -v radon
        msg: "radon is required. Install with - uv pip install radon"
```

### Echo Statement Rules

**Critical**: When writing echo statements in tasks, replace colons with dashes:

```yaml
# ✅ Correct
- echo "Building package - creating wheel"
- echo "Error - file not found"
- echo "Usage - task core:dev:test"

# ❌ Wrong
- echo "Building package: creating wheel"
- echo "Error: file not found"  
- echo "Usage: task core:dev:test"
```

## Quick Reference Card

### Most Used Commands

```bash
# Development
task core:dev:all          # Run all checks
task core:dev:watch:test   # Watch mode for TDD

# Documentation  
task docs:site:preview     # Live documentation server

# Project Creation
task project:scaffold:create:uv NAME=app DIR=~/projects

# Multi-Project
task project:link:add PATH=../other-project
task link:nanobricks       # From project directory

# Release
task version:semver:bump:patch
task build:package:create
```

### Workflow Cheatsheet

| Scenario | Commands |
|----------|----------|
| Start developing | `task core:dev:setup` |
| Before committing | `task core:dev:all` |
| Create new project | `task project:scaffold:create:uv NAME=X DIR=Y` |
| Link project | `task project:link:add PATH=X` |
| Watch tests | `task core:dev:watch:test` |
| Live docs | `task docs:site:preview` |
| Release | `task version:semver:bump:patch` → `task build:package:create` |

## Conclusion

The Nanobricks task system is designed to make development workflows smooth and intuitive. By following these patterns and practices, you can maintain high code quality while moving fast.

Remember:
- Use the task system for all operations
- Follow the naming conventions
- Leverage watch modes for rapid development  
- Link projects for multi-project workflows
- Run comprehensive checks before committing

Happy coding with Nanobricks! 🚀