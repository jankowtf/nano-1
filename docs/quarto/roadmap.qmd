---
title: "Nanobricks Roadmap"
subtitle: "Atomic Development Approach from v0.1.0"
format: 
  html:
    toc: true
    toc-depth: 3
---

## Version Reset Notice

**Important**: As of June 2025, we have reset our version numbering from v0.2.5 back to v0.1.0. This reflects:

1. A shift from version-based to atomic commit-based development
2. More accurate representation of the framework's maturity
3. Better alignment with semantic versioning principles

All functionality from previous versions (0.1.1 through 0.2.5) is included in the new v0.1.0 release.

## Introduction

This roadmap outlines our development approach using atomic commits and git worktrees rather than traditional version milestones. The framework's core abstractions have proven solid through real-world usage, and we're now focused on iterative improvements through focused, atomic changes.

## Development Philosophy

### From Versions to Atomic Commits

Instead of planning large version releases, we now:

- Use **atomic commits** for each logical change
- Leverage **git worktrees** for parallel development
- Focus on **continuous integration** rather than release milestones
- Maintain **semantic versioning** for dependency management only

### Atomic Development Principles

1. **One Feature = One Worktree**: Each feature gets its own isolated workspace
2. **Small, Focused Changes**: Maximum 10 files per commit (warning at 7)
3. **Complete Units**: Each commit includes implementation, tests, and docs
4. **Rapid Integration**: Merge within 48 hours to avoid conflicts

## Current State: v0.1.0 (Reset)

### Consolidated Features

The current v0.1.0 includes all functionality previously released:

- **Core Protocol**: The `Nanobrick[Input, Output]` abstraction
- **Skills System**: The `@skill` decorator pattern for cross-cutting concerns
- **Composition**: Pipeline Builder API with `>>` operator
- **Type Safety**: Generic typing with excellent IDE support
- **Async-First**: Modern design for contemporary Python
- **Task System**: Comprehensive go-task based workflows
- **AI Integration**: Agentic documentation and bridge system
- **Developer Tools**: Scaffolding, debugging, and profiling

### What's Working Well

- Core abstractions proven in production (nano-scorm project)
- ~55% code reduction compared to manual implementation
- 70% reduction in API boilerplate through skills
- Strong composition patterns for complex workflows
- Excellent AI-agent collaboration tools

## Active Development Areas

### Immediate Focus (Atomic Commits)

These areas are being developed through atomic commits:

#### ðŸ”§ Core Improvements
- [ ] Standardize error handling patterns
- [ ] Enhance type inference for pipe operator
- [ ] Optimize async performance
- [ ] Improve protocol validation messages

#### ðŸ“š Documentation
- [ ] Expand cookbook with real-world examples
- [ ] Add troubleshooting guide
- [ ] Create video tutorials
- [ ] Improve API reference

#### ðŸ§° Developer Experience
- [ ] Enhanced CLI scaffolding options
- [ ] Better error messages with suggestions
- [ ] Improved debugging tools
- [ ] VS Code extension

#### ðŸ”Œ Standard Components
- [ ] Common validators (email, URL, phone)
- [ ] File processors (CSV, JSON, XML)
- [ ] HTTP client nanobrick
- [ ] Database connectors

### Medium-Term Goals

These represent larger efforts that may span multiple atomic commits:

#### Stream Processing
```python
class StreamProcessor(NanobrickStream[bytes, ProcessedItem]):
    async def invoke_stream(
        self, 
        input_stream: AsyncIterator[bytes]
    ) -> AsyncIterator[ProcessedItem]:
        async for chunk in input_stream:
            yield await self.process_chunk(chunk)
```

#### State Management
- Patterns for stateful nanobricks
- Persistence mechanisms
- Distributed state coordination

#### Performance Optimization
- Zero-copy operations
- Automatic parallelization
- Memory-efficient streaming

## Contributing Through Atomic Development

### How to Contribute

1. **Identify a Focused Change**: One bug fix, one feature, one improvement
2. **Create a Worktree**: `task worktree:create FEATURE=your-feature`
3. **Make Atomic Commits**: Use `task worktree:atomic:commit`
4. **Submit PR Quickly**: Within 48 hours of starting
5. **Iterate**: Small changes compound into big improvements

### Example Atomic Contributions

- Fix a specific error message
- Add one new validator
- Improve one section of documentation
- Optimize a single function
- Add a missing test case

## Success Metrics

Rather than version-based goals, we measure:

- **Integration Velocity**: Time from commit to main branch
- **Atomic Commit Quality**: Completeness and focus of changes
- **Conflict Rate**: Percentage of PRs with merge conflicts
- **Community Engagement**: Number of atomic contributions
- **User Satisfaction**: Feedback on incremental improvements

## Future Version Planning

While we embrace atomic development, we still plan feature sets that may warrant version bumps:

### Version 0.2.x: Standard Patterns Library
**Theme**: Common bricks to accelerate development

- **Common Validators**: Email, URL, phone, regex, range validators
- **Common Transformers**: JSON adapters, type converters, normalizers
- **File Processing Bricks**: CSV, JSON, XML, YAML readers/writers
- **HTTP Client Brick**: Basic requests wrapper with retry logic
- **Data Manipulation**: Filter, map, reduce, aggregate bricks

### Version 0.3.x: Advanced Developer Experience
**Theme**: Superior tooling and development workflow

#### CLI Enhancements
- **Interactive Scaffolding**: `nanobrick new --interactive`
- **Project Templates**: Full application templates
- **Skill Generation**: `nanobrick add-skill logging` to retrofit existing bricks

#### Development Tools
- **Pipeline Visualizer**: Generate diagrams from code
- **Performance Profiler**: Identify bottlenecks in pipelines
- **Type Stub Generator**: Better IDE support for dynamic features
- **VS Code Extension**: Snippets, navigation, and debugging support

### Version 0.4.x: Comprehensive Standard Library
**Theme**: Batteries-included ecosystem

- **Data Validation**: Email, phone, URL, schema validators
- **HTTP Operations**: Request/response handling, retries, rate limiting
- **Database Access**: Connection pooling, query builders, ORMs
- **File Processing**: CSV, JSON, XML, Excel readers/writers
- **Message Queues**: Kafka, RabbitMQ, Redis pub/sub
- **Caching**: In-memory, Redis, distributed caches

### Version 0.5.x: Advanced Features
**Theme**: Production-scale capabilities

#### Streaming Support
```python
class StreamProcessor(NanobrickStream[bytes, ProcessedItem]):
    async def invoke_stream(
        self, 
        input_stream: AsyncIterator[bytes]
    ) -> AsyncIterator[ProcessedItem]:
        async for chunk in input_stream:
            yield await self.process_chunk(chunk)
```

#### State Management
- **Stateful Bricks**: Clear patterns for maintaining state
- **State Persistence**: Save/restore capabilities
- **Distributed State**: Coordination across instances

### Version 1.0: Production Ready
**Theme**: Enterprise-grade stability

#### Performance Optimizations
- **Zero-Copy Operations**: Efficient data passing
- **Parallel Execution**: Automatic parallelization where possible
- **Memory Management**: Streaming and chunking for large datasets
- **Profiling Tools**: Built-in performance monitoring

#### Observability
- **Distributed Tracing**: Full OpenTelemetry integration
- **Metrics Collection**: Prometheus-compatible metrics
- **Health Checks**: Standardized health/readiness probes
- **Debugging Tools**: Enhanced error messages and stack traces

#### Enterprise Features
- **Security**: Sandboxing, permission models, audit trails
- **Compliance**: GDPR, SOC2, HIPAA helpers
- **Multi-tenancy**: Isolation and resource limits
- **High Availability**: Clustering and failover support

## Long-Term Vision (Post-1.0)

### AI-Native Framework
- **LLM Integration**: First-class support for AI models
- **Prompt Management**: Version and test prompts
- **RAG Pipelines**: Built-in retrieval-augmented generation
- **Agent Frameworks**: Multi-agent orchestration

### Distributed Computing
- **Cluster Mode**: Scale across multiple machines
- **Workflow Engine**: Complex DAG execution
- **Event Sourcing**: Built-in event store
- **CQRS Support**: Command/query separation

### Language Expansion
- **Type Hints**: Full runtime validation with beartype
- **Rust Extensions**: Performance-critical components
- **WebAssembly**: Run bricks in browsers
- **Cross-Language**: Polyglot brick composition

## Version Planning Philosophy

We use a hybrid approach:

1. **Atomic Commits** for day-to-day development
2. **Version Milestones** for major feature sets
3. **Semantic Versioning** for dependency management

This provides:
- **Clear Communication**: Users know what's coming
- **Flexible Implementation**: Features develop organically
- **Quality Focus**: Ship when ready, not by deadline

## Getting Involved

### For Users
- Test atomic changes in your projects
- Provide feedback on specific improvements
- Report bugs with reproducible examples
- Suggest focused enhancements

### For Contributors
- Pick an atomic task from GitHub issues
- Create focused PRs that do one thing well
- Review others' atomic commits
- Help maintain documentation

### For Maintainers
- Guide atomic development direction
- Ensure quality standards
- Coordinate parallel efforts
- Foster community growth

---

*This roadmap is a living document updated through atomic commits. Each contribution shapes the future of nanobricks!*