---
title: "Task Automation Guide"
subtitle: "Creating and maintaining Taskfiles in Nanobricks projects"
---

# Task Automation Guide

This guide covers the technical aspects of creating, maintaining, and extending Taskfiles in Nanobricks projects. Learn how to build robust automation that follows Nanobricks conventions.

## Understanding the Task Architecture

### File Organization

Nanobricks organizes tasks across multiple files for maintainability:

```
Taskfile.yml         # Main entry point, core tasks
Taskfile.build.yml   # Build and distribution tasks
Taskfile.dev.yml     # Development utilities
Taskfile.docs.yml    # Documentation tasks
Taskfile.version.yml # Version management
```

### Inclusion Pattern

The main `Taskfile.yml` includes others with namespaces:

```yaml
includes:
  build: ./Taskfile.build.yml    # Accessed as build:*
  project: ./Taskfile.dev.yml    # Accessed as project:*
  version: ./Taskfile.version.yml # Accessed as version:*
  docs: ./Taskfile.docs.yml      # Accessed as docs:*
```

## Creating a New Taskfile

### Basic Structure

Every Taskfile should follow this structure:

```yaml
version: '3'
silent: true  # REQUIRED: Prevents verbose output

vars:
  # Define reusable variables
  PROJECT_DIR:
    sh: pwd
  PYTHON_VERSION: '3.13'

tasks:
  # Your tasks here
```

### Naming Convention

Follow the `namespace:component:action:variant` pattern:

```yaml
tasks:
  # Good examples
  data:process:csv:
    desc: Process CSV files
    
  data:process:json:
    desc: Process JSON files
    
  data:validate:schema:
    desc: Validate data schema

  # Bad examples (avoid these)
  process_csv:
  processData:
  csv-processor:
```

## Task Definition Patterns

### Basic Task

```yaml
tasks:
  example:basic:task:
    desc: A simple task example
    cmds:
      - echo "Running basic task"
      - uv run python -m mymodule
```

### Task with Variables

```yaml
tasks:
  deploy:server:staging:
    desc: Deploy to staging server
    vars:
      SERVER: '{{.SERVER | default "staging.example.com"}}'
      PORT: '{{.PORT | default "22"}}'
    cmds:
      - echo "Deploying to {{.SERVER}}"
      - rsync -avz dist/ user@{{.SERVER}}:/app/
```

### Task with Preconditions

```yaml
tasks:
  build:docker:image:
    desc: Build Docker image
    preconditions:
      - sh: command -v docker
        msg: "Docker is required but not installed"
      - sh: test -f Dockerfile
        msg: "Dockerfile not found in project root"
    cmds:
      - docker build -t myapp:latest .
```

### Task with File Watching

```yaml
tasks:
  assets:compile:css:
    desc: Compile CSS files
    sources:
      - src/styles/**/*.scss
      - src/styles/**/*.css
    generates:
      - dist/styles/main.css
    cmds:
      - echo "Compiling CSS..."
      - sass src/styles/main.scss dist/styles/main.css
```

## Advanced Patterns

### Internal Helper Tasks

Use internal tasks for reusable logic:

```yaml
tasks:
  _validate:environment:
    internal: true
    preconditions:
      - sh: test -n "$API_KEY"
        msg: "API_KEY environment variable not set"
      - sh: test -f .env
        msg: ".env file not found"

  api:deploy:production:
    desc: Deploy API to production
    deps: [_validate:environment]
    cmds:
      - echo "Deploying to production..."
```

### Task Dependencies

```yaml
tasks:
  release:prepare:
    desc: Prepare for release
    deps:
      - core:dev:test
      - core:dev:lint
      - docs:site:render
    cmds:
      - echo "All checks passed, ready for release"

  release:publish:
    desc: Publish release
    deps: [release:prepare]
    cmds:
      - task: build:package:create
      - task: deploy:publish:pypi
```

### Dynamic Task Generation

```yaml
tasks:
  test:module:
    desc: Test a specific module
    vars:
      MODULE: '{{.MODULE}}'
    cmds:
      - |
        if [ -z "{{.MODULE}}" ]; then
          echo "Error - Please specify MODULE"
          echo "Usage - task test:module MODULE=mymodule"
          exit 1
        fi
      - uv run pytest tests/{{.MODULE}}/ -v
```

### Platform-Specific Tasks

```yaml
tasks:
  setup:dev:env:
    desc: Set up development environment
    cmds:
      - task: setup:dev:env:{{OS}}

  setup:dev:env:windows:
    desc: Windows-specific setup
    platforms: [windows]
    cmds:
      - powershell -ExecutionPolicy Bypass -File scripts/setup-windows.ps1

  setup:dev:env:darwin:
    desc: macOS-specific setup
    platforms: [darwin]
    cmds:
      - brew install python@3.13
      - brew install quarto

  setup:dev:env:linux:
    desc: Linux-specific setup
    platforms: [linux]
    cmds:
      - sudo apt-get update
      - sudo apt-get install python3.13
```

## Echo Statement Rules

### Critical Rule: No Colons in Echo Text

Always replace colons with dashes in echo statements:

```yaml
tasks:
  example:echo:patterns:
    cmds:
      # ✅ CORRECT - Use dashes
      - echo "Building project - please wait"
      - echo "Error - file not found"
      - echo "Usage - task build:package:create"
      - echo "Status - build complete"
      
      # ❌ WRONG - Never use colons
      - echo "Building project: please wait"
      - echo "Error: file not found"
      - echo "Usage: task build:package:create"
      - echo "Status: build complete"
```

### Examples in Context

```yaml
tasks:
  deploy:check:prerequisites:
    desc: Check deployment prerequisites
    cmds:
      - echo "Checking prerequisites - validating environment"
      - |
        if [ ! -f deploy.key ]; then
          echo "Error - deployment key not found"
          echo "Generate one with - task deploy:generate:key"
          exit 1
        fi
      - echo "Success - all prerequisites met"
```

## Error Handling Patterns

### Comprehensive Error Checking

```yaml
tasks:
  database:backup:create:
    desc: Create database backup
    vars:
      DB_NAME: '{{.DB_NAME}}'
      BACKUP_DIR: '{{.BACKUP_DIR | default "./backups"}}'
    cmds:
      - |
        # Validate inputs
        if [ -z "{{.DB_NAME}}" ]; then
          echo "Error - DB_NAME not specified"
          echo "Usage - task database:backup:create DB_NAME=mydb"
          exit 1
        fi
        
        # Check prerequisites
        if ! command -v pg_dump >/dev/null 2>&1; then
          echo "Error - pg_dump not found"
          echo "Install PostgreSQL client tools first"
          exit 1
        fi
        
        # Create backup directory
        mkdir -p {{.BACKUP_DIR}}
        
        # Perform backup
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_FILE="{{.BACKUP_DIR}}/{{.DB_NAME}}_${TIMESTAMP}.sql"
        
        echo "Creating backup - {{.DB_NAME}} to ${BACKUP_FILE}"
        pg_dump {{.DB_NAME}} > "${BACKUP_FILE}"
        
        if [ $? -eq 0 ]; then
          echo "Success - backup created at ${BACKUP_FILE}"
        else
          echo "Error - backup failed"
          exit 1
        fi
```

### Graceful Degradation

```yaml
tasks:
  lint:code:full:
    desc: Run all available linters
    cmds:
      - |
        echo "Running code linters..."
        
        # Run ruff (required)
        if command -v ruff >/dev/null 2>&1; then
          echo "Running ruff..."
          ruff check src/ tests/
        else
          echo "Error - ruff not found (required)"
          exit 1
        fi
        
        # Run mypy (required)
        if command -v mypy >/dev/null 2>&1; then
          echo "Running mypy..."
          mypy src/
        else
          echo "Error - mypy not found (required)"
          exit 1
        fi
        
        # Run optional linters
        if command -v pylint >/dev/null 2>&1; then
          echo "Running pylint..."
          pylint src/
        else
          echo "Warning - pylint not found (optional)"
        fi
```

## Performance Optimization

### Using Sources and Generates

Optimize rebuilds with proper file tracking:

```yaml
tasks:
  compile:documentation:
    desc: Compile documentation
    sources:
      - docs/**/*.md
      - docs/**/*.qmd
      - templates/**/*
    generates:
      - build/docs/index.html
      - build/docs/**/*.html
    cmds:
      - echo "Compiling documentation..."
      - quarto render docs/ --output-dir build/docs
```

### Parallel Execution

Run independent tasks in parallel:

```yaml
tasks:
  check:all:parallel:
    desc: Run all checks in parallel
    deps:
      - task: core:dev:lint
        parallel: true
      - task: core:dev:typecheck
        parallel: true
      - task: docs:content:validate
        parallel: true
    cmds:
      - echo "All parallel checks completed"
```

## Creating Project-Specific Taskfiles

### Template for New Projects

When creating a new project, include this Taskfile template:

```yaml
version: '3'
silent: true

vars:
  PROJECT_NAME: 'my-project'
  SRC_DIR: 'src/{{.PROJECT_NAME | replace "-" "_"}}'
  NANOBRICKS_PATH: '{{.NANOBRICKS_PATH | default ""}}'

tasks:
  # Development tasks
  dev:setup:
    desc: Set up development environment
    cmds:
      - uv venv --python 3.13
      - uv pip install -e ".[dev]"
      - echo "✅ Development environment ready"

  dev:test:
    desc: Run tests
    cmds:
      - uv run pytest tests/ -v

  dev:test:watch:
    desc: Run tests in watch mode
    cmds:
      - uv run watchexec -e py -w {{.SRC_DIR}} -w tests -- pytest tests/ -v

  dev:lint:
    desc: Run linters
    cmds:
      - uv run ruff check {{.SRC_DIR}} tests/
      - uv run mypy {{.SRC_DIR}}

  dev:format:
    desc: Format code
    cmds:
      - uv run ruff format {{.SRC_DIR}} tests/
      - uv run black {{.SRC_DIR}} tests/

  # Nanobricks integration
  nanobricks:link:
    desc: Link to Nanobricks source
    vars:
      LINK_NAME: 'linked-nanobricks'
    cmds:
      - |
        if [ -z "{{.NANOBRICKS_PATH}}" ]; then
          echo "Error - NANOBRICKS_PATH not set"
          echo "Usage - task nanobricks:link NANOBRICKS_PATH=/path/to/nanobricks"
          exit 1
        fi
      - |
        if [ -L "{{.LINK_NAME}}" ]; then
          rm "{{.LINK_NAME}}"
        fi
      - ln -s "{{.NANOBRICKS_PATH}}" "{{.LINK_NAME}}"
      - echo "✅ Linked to Nanobricks at {{.LINK_NAME}}"

  # Build tasks
  build:package:
    desc: Build distribution package
    cmds:
      - uv run python -m build
      - echo "✅ Package built in dist/"

  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list
```

## Best Practices Checklist

### Do's

1. ✅ **Always use `silent: true`** - Reduces output noise
2. ✅ **Follow naming convention** - `namespace:component:action:variant`
3. ✅ **Add descriptions** - Every public task needs a `desc:`
4. ✅ **Use variables** - Make tasks configurable
5. ✅ **Handle errors** - Check preconditions and validate inputs
6. ✅ **Replace colons with dashes** - In all echo statements
7. ✅ **Use file watching** - Define sources and generates
8. ✅ **Document usage** - Show examples in error messages

### Don'ts

1. ❌ **Don't use colons in echo text** - Replace with dashes
2. ❌ **Don't hardcode paths** - Use variables
3. ❌ **Don't ignore errors** - Always check command results
4. ❌ **Don't mix naming styles** - Stick to the convention
5. ❌ **Don't create overly complex tasks** - Split into smaller ones
6. ❌ **Don't forget platform differences** - Test on all platforms

## Debugging Taskfiles

### Verbose Mode

```bash
# See what commands are executed
task --verbose my:task:name

# Dry run without execution
task --dry my:task:name
```

### Debug Output

Add debug information to tasks:

```yaml
tasks:
  debug:environment:
    desc: Show environment information
    cmds:
      - echo "Current directory - $(pwd)"
      - echo "Python version - $(python --version)"
      - echo "Available tasks - $(task --list | wc -l) tasks"
      - echo "Environment variables -"
      - env | grep -E "(PATH|VIRTUAL_ENV|PYTHONPATH)" | sort
```

### Common Issues

1. **Task not found** - Check namespace and spelling
2. **Variable not expanding** - Use proper syntax `{{.VAR}}`
3. **Command fails silently** - Add error checking
4. **Platform-specific issues** - Use platform conditions

## Examples Repository

### Complete Taskfile Example

Here's a comprehensive example combining all patterns:

```yaml
version: '3'
silent: true

vars:
  PROJECT: 'awesome-app'
  SRC_DIR: 'src'
  TEST_DIR: 'tests'
  BUILD_DIR: 'build'
  PYTHON_VERSION: '3.13'

includes:
  docker: ./Taskfile.docker.yml
  deploy: ./Taskfile.deploy.yml

tasks:
  # Setup and initialization
  setup:dev:full:
    desc: Complete development setup
    cmds:
      - task: setup:check:requirements
      - task: setup:create:venv
      - task: setup:install:deps
      - echo "✅ Development environment ready"

  setup:check:requirements:
    desc: Check system requirements
    internal: true
    preconditions:
      - sh: command -v python{{.PYTHON_VERSION}}
        msg: "Python {{.PYTHON_VERSION}} is required"
      - sh: command -v uv
        msg: "uv is required - install from https://github.com/astral-sh/uv"

  setup:create:venv:
    desc: Create virtual environment
    internal: true
    cmds:
      - uv venv --python {{.PYTHON_VERSION}}
      - echo "Virtual environment created"

  setup:install:deps:
    desc: Install dependencies
    internal: true
    cmds:
      - uv pip install -e ".[dev]"
      - echo "Dependencies installed"

  # Development workflow
  dev:check:all:
    desc: Run all development checks
    cmds:
      - task: dev:format:check
      - task: dev:lint:all
      - task: dev:test:all
      - task: dev:typecheck:strict

  dev:format:check:
    desc: Check code formatting
    cmds:
      - |
        if ! uv run ruff format --check {{.SRC_DIR}} {{.TEST_DIR}}; then
          echo "Error - formatting issues found"
          echo "Run - task dev:format:fix"
          exit 1
        fi
      - echo "✅ Code formatting is correct"

  dev:format:fix:
    desc: Fix code formatting
    cmds:
      - uv run ruff format {{.SRC_DIR}} {{.TEST_DIR}}
      - uv run black {{.SRC_DIR}} {{.TEST_DIR}}
      - echo "✅ Code formatted"

  # Testing
  test:unit:
    desc: Run unit tests
    sources:
      - '{{.SRC_DIR}}/**/*.py'
      - '{{.TEST_DIR}}/unit/**/*.py'
    cmds:
      - uv run pytest {{.TEST_DIR}}/unit/ -v

  test:integration:
    desc: Run integration tests
    sources:
      - '{{.SRC_DIR}}/**/*.py'
      - '{{.TEST_DIR}}/integration/**/*.py'
    cmds:
      - uv run pytest {{.TEST_DIR}}/integration/ -v

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - uv run pytest {{.TEST_DIR}}/ --cov={{.SRC_DIR}} --cov-report=html --cov-report=term
      - echo "Coverage report generated in htmlcov/"

  # Building
  build:clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}} dist/ *.egg-info
      - echo "✅ Build artifacts cleaned"

  build:package:wheel:
    desc: Build wheel package
    deps: [build:clean]
    sources:
      - '{{.SRC_DIR}}/**/*.py'
      - pyproject.toml
    generates:
      - dist/*.whl
    cmds:
      - uv run python -m build --wheel
      - echo "✅ Wheel package built"

  # Utility tasks
  util:count:lines:
    desc: Count lines of code
    cmds:
      - |
        echo "Lines of code -"
        echo "Python files - $(find {{.SRC_DIR}} -name '*.py' -exec wc -l {} + | tail -1)"
        echo "Test files - $(find {{.TEST_DIR}} -name '*.py' -exec wc -l {} + | tail -1)"

  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list
```

## Conclusion

Creating effective Taskfiles is about consistency, clarity, and convention. By following the patterns and practices in this guide, you'll create automation that's discoverable, maintainable, and pleasant to use.

Key takeaways:

- Always follow the `namespace:component:action:variant` pattern
- Replace colons with dashes in echo statements
- Handle errors gracefully
- Make tasks configurable with variables
- Use file watching for efficiency
- Document your tasks well

Happy automating! 🚀