---
description:
globs:
alwaysApply: false
---
# FastAPI Backend Architecture

## Directory Structure

```
src/presales/api/
├── __init__.py
├── core/
│   ├── __init__.py
│   ├── ai_engine.py       # AI assessment engine
│   ├── config.py          # API configuration
│   └── security.py        # Authentication and authorization
├── dependencies/
│   ├── __init__.py
│   ├── auth.py            # Authentication dependencies
│   ├── common.py          # Common dependencies
│   └── logging.py         # Logging dependencies
├── models/
│   ├── __init__.py
│   ├── client.py          # Client data models
│   ├── subscription.py    # Subscription data models
│   ├── ticket.py          # Ticket data models
│   └── user.py            # User data models
├── routes/
│   ├── __init__.py
│   ├── admin.py           # Admin endpoints
│   ├── clients.py         # Client management endpoints
│   ├── subscriptions.py   # Subscription management endpoints
│   └── tickets.py         # Ticket management endpoints
├── services/
│   ├── __init__.py
│   ├── admin_service.py   # Admin service
│   ├── client_service.py  # Client service
│   ├── email_service.py   # Email notification service
│   ├── subscription_service.py # Subscription service
│   └── ticket_service.py  # Ticket service
└── tests/
    ├── __init__.py
    ├── conftest.py        # Test fixtures
    ├── test_routes/       # Route tests
    └── test_services/     # Service tests
```

## API Structure Principles

1. **Layer Separation**:
   - Routes: Handle HTTP requests and responses
   - Services: Implement business logic
   - Models: Define data structures and validation
   - Dependencies: Provide shared functionality

2. **Dependency Injection**:
   - Use FastAPI's dependency injection system
   - Create reusable dependencies for common operations
   - Inject services into routes

3. **API Versioning**:
   - Include version in API path: `/api/v1/...`
   - Use APIRouter with prefix and tags
   - Keep backward compatibility when possible

## Models Design

### Base Models

```python
# Base model with common fields
class BaseModel(pydantic.BaseModel):
    """Base class for all models."""
    
    class Config:
        """Pydantic configuration."""
        populate_by_name = True
        from_attributes = True


# Base DB model with ID and timestamps
class BaseDBModel(BaseModel):
    """Base class for database models."""
    id: UUID4 = Field(default_factory=uuid4)
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
```

### Response Models

```python
class ResponseModel(BaseModel):
    """Base response model."""
    success: bool
    message: str | None = None


class PaginatedResponse(ResponseModel):
    """Paginated response model."""
    total: int
    page: int
    page_size: int
    data: list[Any]
```

### Request Models

```python
class TicketCreateRequest(BaseModel):
    """Request model for creating a ticket."""
    title: str = Field(..., min_length=1, max_length=100)
    description: str = Field(..., min_length=1)
    priority: TicketPriority
    timeline_requirement: str | None = None
    
    @field_validator("title")
    def title_must_be_valid(cls, v):
        if not v.strip():
            raise ValueError("Title cannot be empty")
        return v.strip()
```

## Route Organization

### Router Setup

```python
# In routes/__init__.py
from fastapi import APIRouter
from .tickets import router as tickets_router
from .clients import router as clients_router
from .subscriptions import router as subscriptions_router
from .admin import router as admin_router

# Create main API router
api_router = APIRouter(prefix="/api/v1")

# Include all routers with their prefixes
api_router.include_router(tickets_router, prefix="/tickets", tags=["tickets"])
api_router.include_router(clients_router, prefix="/clients", tags=["clients"])
api_router.include_router(subscriptions_router, prefix="/subscriptions", tags=["subscriptions"])
api_router.include_router(admin_router, prefix="/admin", tags=["admin"])
```

### Route Module Example

```python
# In routes/tickets.py
from fastapi import APIRouter, Depends, HTTPException, status
from .. import models, services, dependencies

router = APIRouter()

@router.post("/", response_model=models.TicketResponse)
async def create_ticket(
    ticket_data: models.TicketCreateRequest,
    ticket_service: services.TicketService = Depends(dependencies.get_ticket_service),
    current_user: models.User = Depends(dependencies.get_current_user),
):
    """Create a new ticket."""
    try:
        ticket = await ticket_service.create_ticket(ticket_data, current_user.id)
        return models.TicketResponse(
            success=True,
            message="Ticket created successfully",
            data=ticket
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
```

## Service Organization

### Service Class Pattern

```python
# In services/ticket_service.py
class TicketService:
    """Service for ticket management."""
    
    def __init__(
        self,
        db: Database,
        ai_engine: AIEngine,
        notification_service: NotificationService
    ):
        """Initialize the ticket service."""
        self.db = db
        self.ai_engine = ai_engine
        self.notification_service = notification_service
    
    async def create_ticket(
        self,
        ticket_data: models.TicketCreateRequest,
        user_id: UUID
    ) -> models.Ticket:
        """Create a new ticket."""
        # Business logic here
        assessment = await self.ai_engine.assess_ticket(ticket_data)
        
        ticket = models.Ticket(
            title=ticket_data.title,
            description=ticket_data.description,
            priority=ticket_data.priority,
            created_by=user_id,
            assessment=assessment,
            status="pending"
        )
        
        ticket_id = await self.db.tickets.insert(ticket)
        ticket.id = ticket_id
        
        # Send notification
        await self.notification_service.send_ticket_created(ticket)
        
        return ticket
```

## Dependencies Organization

### Common Dependencies Pattern

```python
# In dependencies/common.py
from fastapi import Depends
from ..services import TicketService, ClientService, SubscriptionService
from ..core import get_db, get_ai_engine, get_notification_service

async def get_ticket_service(
    db = Depends(get_db),
    ai_engine = Depends(get_ai_engine),
    notification_service = Depends(get_notification_service)
) -> TicketService:
    """Dependency for the ticket service."""
    return TicketService(db, ai_engine, notification_service)


async def get_client_service(
    db = Depends(get_db),
    notification_service = Depends(get_notification_service)
) -> ClientService:
    """Dependency for the client service."""
    return ClientService(db, notification_service)
```

## Authentication and Authorization

### Auth Dependencies

```python
# In dependencies/auth.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from ..core import security
from ..models import User
from ..services import UserService

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/auth/token")

async def get_current_user(
    token: str = Depends(oauth2_scheme),
    user_service: UserService = Depends(get_user_service)
) -> User:
    """Get the current user from the token."""
    try:
        payload = security.decode_token(token)
        user_id = payload.get("sub")
        if user_id is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
        
    user = await user_service.get_by_id(user_id)
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found",
            headers={"WWW-Authenticate": "Bearer"},
        )
        
    return user


async def get_current_admin(
    current_user: User = Depends(get_current_user)
) -> User:
    """Check if the current user is an admin."""
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    return current_user
```

## API Documentation

### Documentation Setup

```python
# In main.py or app.py
from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi

app = FastAPI(
    title="Presales API",
    description="API for presales management",
    version="0.1.0",
)

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
        
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    # Customize OpenAPI schema
    openapi_schema["info"]["x-logo"] = {
        "url": "https://example.com/logo.png"
    }
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema
    
app.openapi = custom_openapi
```

## Error Handling

### Exception Handling Pattern

```python
# In core/exceptions.py
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class AppException(Exception):
    """Base exception for the application."""
    def __init__(self, status_code: int, detail: str):
        self.status_code = status_code
        self.detail = detail
        
class NotFoundException(AppException):
    """Exception for not found resources."""
    def __init__(self, detail: str = "Resource not found"):
        super().__init__(404, detail)
        
class ForbiddenException(AppException):
    """Exception for forbidden resources."""
    def __init__(self, detail: str = "Forbidden"):
        super().__init__(403, detail)

def add_exception_handlers(app: FastAPI):
    """Add exception handlers to the app."""
    
    @app.exception_handler(AppException)
    async def app_exception_handler(request: Request, exc: AppException):
        return JSONResponse(
            status_code=exc.status_code,
            content={"success": False, "message": exc.detail}
        )
```

## Testing Pattern

### Test Setup

```python
# In tests/conftest.py
import pytest
from httpx import AsyncClient
from fastapi import FastAPI
from ..app import create_app
from ..core import get_db
from ..models import User

@pytest.fixture
def app() -> FastAPI:
    """Create a test app."""
    return create_app(testing=True)
    
@pytest.fixture
async def client(app: FastAPI) -> AsyncClient:
    """Create a test client."""
    async with AsyncClient(app=app, base_url="http://test") as client:
        yield client
        
@pytest.fixture
async def test_db():
    """Create a test database."""
    # Setup test database
    db = create_test_db()
    yield db
    # Teardown test database
    await db.disconnect()

@pytest.fixture
async def test_user(test_db) -> User:
    """Create a test user."""
    user = User(
        email="test@example.com",
        name="Test User",
        is_admin=False
    )
    user_id = await test_db.users.insert(user)
    user.id = user_id
    return user
```

### Route Tests

```python
# In tests/test_routes/test_tickets.py
import pytest
from httpx import AsyncClient
from ...models import Ticket

@pytest.mark.asyncio
async def test_create_ticket(
    client: AsyncClient,
    test_user: dict,
    test_db
):
    """Test creating a ticket."""
    # Arrange
    token = create_test_token(test_user)
    headers = {"Authorization": f"Bearer {token}"}
    ticket_data = {
        "title": "Test Ticket",
        "description": "This is a test ticket",
        "priority": "medium"
    }
    
    # Act
    response = await client.post(
        "/api/v1/tickets/",
        json=ticket_data,
        headers=headers
    )
    
    # Assert
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is True
    assert data["data"]["title"] == ticket_data["title"]
    
    # Verify in database
    db_ticket = await test_db.tickets.find_one({"title": ticket_data["title"]})
    assert db_ticket is not None
```

## Best Practices

1. **API Design**:
   - Use consistent naming conventions for endpoints
   - Follow REST principles for resource operations
   - Use appropriate HTTP methods and status codes
   - Design clear error responses

2. **Validation**:
   - Use Pydantic models for request and response validation
   - Implement proper validation rules for all inputs
   - Handle validation errors consistently

3. **Security**:
   - Implement proper authentication and authorization
   - Use HTTPS for all API endpoints
   - Validate and sanitize all inputs
   - Implement rate limiting for public endpoints

4. **Performance**:
   - Optimize database queries
   - Use async operations when possible
   - Implement caching for common operations
   - Paginate large result sets

5. **Testing**:
   - Write unit tests for services and utilities
   - Write integration tests for routes
   - Use fixtures for common test setup
   - Mock external services
