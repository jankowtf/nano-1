---
description: 
globs: 
alwaysApply: false
---
Rule Name: best-practice-gitignore-python
Description:
# Python Project .gitignore Best Practices

This document outlines the standard `.gitignore` configuration for this project. Adhering to this standard keeps the repository clean and avoids committing unnecessary or sensitive files.

## Single Source of Truth

**IMPORTANT**: The canonical source for the `.gitignore` content, which defines all ignore patterns for this project, is located at:
`/.templates/gitignore.template`

To view the current rules, please refer directly to that file.

If any changes to the ignore patterns are needed, you **MUST** edit the template file at `/.templates/gitignore.template`. This ensures we maintain a single, definitive source of truth.

## Rationale

- **Python Bytecode**: `__pycache__` and `*.pyc` files are generated by the Python interpreter and can be recreated. They don't belong in version control.
- **Distribution Artifacts**: `build/`, `dist/`, and `*.egg-info` are created when packaging the project for distribution. They should be generated in a CI/CD pipeline, not stored in the repository.
- **Virtual Environments**: Directories like `.venv/` contain installed dependencies specific to a developer's machine. The `pyproject.toml` and `uv.lock` files are the source of truth for dependencies.
- **Environment Variables**: `.env` files contain secrets and machine-specific configurations. They should never be committed to version control.
- **Tooling Caches**: Caches for `pytest`, `ruff`, and `mypy` improve local performance but are not needed by other developers or in CI.
- **IDE/Editor Config**: `.vscode/` and `.idea/` directories store user-specific editor settings. Committing them can cause conflicts and override personal preferences.
- **Project-Specific**: `reports/`, `.archive/`, and `temp/` are for generated or transient files that don't belong in the main source tree.
