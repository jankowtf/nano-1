# Semantic Versioning Tasks for Nanobricks
# 
# This file provides tasks for managing versions and releases following
# semantic versioning principles. The version in pyproject.toml is the
# single source of truth.
#
# Usage:
#   task version:current    - Show current version
#   task version:bump:patch - Bump patch version (0.1.0 → 0.1.1)
#   task version:bump:minor - Bump minor version (0.1.0 → 0.2.0)
#   task version:bump:major - Bump major version (0.1.0 → 1.0.0)
#   task version:tag:create - Create git tag for current version
#   task changelog:update   - Update CHANGELOG.md for new release

version: '3'

vars:
  PYPROJECT_FILE: pyproject.toml
  CHANGELOG_FILE: CHANGELOG.md

tasks:
  # Version reading operations
  version:current:
    desc: Show current package version
    cmds:
      - |
        echo "Current version: $(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)"
    silent: true

  version:list:
    desc: List all git version tags
    cmds:
      - git tag -l "v*" | sort -V
    silent: true

  version:check:
    desc: Verify version consistency across files
    cmds:
      - echo "Checking version consistency..."
      - |
        VERSION=$(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)
        echo "pyproject.toml version: $VERSION"
        
        # Check if current version tag exists
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "✓ Git tag v$VERSION exists"
        else
          echo "⚠ Git tag v$VERSION does not exist (run 'task version:tag:create' after committing)"
        fi
        
        # Check if version is mentioned in CHANGELOG
        if grep -q "\[$VERSION\]" {{.CHANGELOG_FILE}}; then
          echo "✓ Version $VERSION found in CHANGELOG.md"
        else
          echo "⚠ Version $VERSION not found in CHANGELOG.md"
        fi

  # Version bumping operations
  version:bump:patch:
    desc: Bump patch version (e.g., 0.1.0 → 0.1.1)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: patch

  version:bump:minor:
    desc: Bump minor version (e.g., 0.1.0 → 0.2.0)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: minor

  version:bump:major:
    desc: Bump major version (e.g., 0.1.0 → 1.0.0)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: major

  # Tag operations
  version:tag:create:
    desc: Create git tag for current version
    cmds:
      - |
        VERSION=$(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)
        TAG="v$VERSION"
        
        # Check if tag already exists
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Error: Tag $TAG already exists"
          exit 1
        fi
        
        # Check for uncommitted changes
        if ! git diff-index --quiet HEAD --; then
          echo "Error: You have uncommitted changes. Please commit them first."
          exit 1
        fi
        
        echo "Creating tag $TAG..."
        git tag -a "$TAG" -m "Release version $VERSION"
        echo "✓ Created tag $TAG"
        echo ""
        echo "To push the tag to remote, run:"
        echo "  git push origin $TAG"

  version:tag:list:
    desc: List all version tags with dates
    cmds:
      - git tag -l "v*" --sort=-version:refname --format='%(refname:short) - %(creatordate:short) - %(subject)'
    silent: true

  version:tag:delete:
    desc: Delete a version tag (use with caution)
    cmds:
      - |
        echo "Available tags:"
        git tag -l "v*" | sort -V
        echo ""
        read -p "Enter tag to delete: " TAG
        
        if [[ -z "$TAG" ]]; then
          echo "No tag specified"
          exit 1
        fi
        
        read -p "Are you sure you want to delete tag $TAG? (y/N): " CONFIRM
        if [[ "$CONFIRM" == "y" || "$CONFIRM" == "Y" ]]; then
          git tag -d "$TAG"
          echo "✓ Deleted local tag $TAG"
          echo ""
          echo "To delete from remote, run:"
          echo "  git push origin --delete $TAG"
        else
          echo "Cancelled"
        fi

  # Changelog operations
  changelog:add:
    desc: Add a new entry to the Unreleased section
    cmds:
      - |
        echo "Select change type:"
        echo "1) Added"
        echo "2) Changed"
        echo "3) Deprecated"
        echo "4) Removed"
        echo "5) Fixed"
        echo "6) Security"
        read -p "Enter choice (1-6): " CHOICE
        
        case $CHOICE in
          1) SECTION="Added" ;;
          2) SECTION="Changed" ;;
          3) SECTION="Deprecated" ;;
          4) SECTION="Removed" ;;
          5) SECTION="Fixed" ;;
          6) SECTION="Security" ;;
          *) echo "Invalid choice"; exit 1 ;;
        esac
        
        read -p "Enter change description: " DESCRIPTION
        
        # Add entry under the appropriate section in Unreleased
        # This is a simplified version - in production you might want a more robust solution
        echo "- $DESCRIPTION" >> /tmp/changelog_entry.txt
        echo ""
        echo "Entry to be added to '$SECTION' section:"
        echo "- $DESCRIPTION"
        echo ""
        echo "Please manually add this to the appropriate section in {{.CHANGELOG_FILE}}"

  changelog:update:
    desc: Update CHANGELOG for a new release
    cmds:
      - |
        VERSION=$(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)
        DATE=$(date +%Y-%m-%d)
        
        echo "Preparing CHANGELOG for version $VERSION..."
        
        # Check if version already exists in changelog
        if grep -q "\[$VERSION\]" {{.CHANGELOG_FILE}}; then
          echo "Version $VERSION already exists in CHANGELOG"
          exit 1
        fi
        
        echo ""
        echo "This will:"
        echo "1. Change '## [Unreleased]' to '## [$VERSION] - $DATE'"
        echo "2. Add a new '## [Unreleased]' section at the top"
        echo "3. Update the comparison links at the bottom"
        echo ""
        echo "Please edit {{.CHANGELOG_FILE}} manually to complete these changes."
        echo ""
        echo "Don't forget to:"
        echo "- Review all entries under the version"
        echo "- Ensure proper categorization (Added, Changed, etc.)"
        echo "- Update comparison links"

  changelog:show:
    desc: Display recent changelog entries
    cmds:
      - |
        echo "=== Recent Changelog Entries ==="
        echo ""
        # Show the first 50 lines of the changelog (usually covers recent versions)
        head -n 50 {{.CHANGELOG_FILE}}

  # Internal tasks (prefixed with _)
  _bump:
    internal: true
    vars:
      CURRENT_VERSION:
        sh: grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2
    cmds:
      - |
        CURRENT="{{.CURRENT_VERSION}}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        
        case "{{.BUMP_TYPE}}" in
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
        esac
        
        echo "Bumping version from $CURRENT to $NEW_VERSION..."
        
        # Update pyproject.toml (BSD-compatible sed)
        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' "s/^version = \"$CURRENT\"/version = \"$NEW_VERSION\"/" {{.PYPROJECT_FILE}}
        else
          sed -i "s/^version = \"$CURRENT\"/version = \"$NEW_VERSION\"/" {{.PYPROJECT_FILE}}
        fi
        
        echo "✓ Updated {{.PYPROJECT_FILE}}"
        echo ""
        echo "Next steps:"
        echo "1. Update {{.CHANGELOG_FILE}} with 'task changelog:update'"
        echo "2. Commit changes: git add -A && git commit -m 'chore: bump version to $NEW_VERSION'"
        echo "3. Create tag: task version:tag:create"
        echo "4. Push changes: git push && git push --tags"