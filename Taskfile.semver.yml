# Semantic Versioning Tasks for Nanobricks
# 
# This file provides tasks for managing versions and releases following
# semantic versioning principles. The version in pyproject.toml is the
# single source of truth.
#
# Usage:
#   task -t Taskfile.semver.yml version:current    - Show current version
#   task -t Taskfile.semver.yml version:bump:patch - Bump patch version (0.1.0 → 0.1.1)
#   task -t Taskfile.semver.yml version:bump:minor - Bump minor version (0.1.0 → 0.2.0)
#   task -t Taskfile.semver.yml version:bump:major - Bump major version (0.1.0 → 1.0.0)
#   task -t Taskfile.semver.yml version:tag:create - Create git tag for current version

version: '3'

vars:
  PYPROJECT_FILE: pyproject.toml
  CHANGELOG_FILE: CHANGELOG.md

tasks:
  version:current:
    desc: Show current package version
    cmds:
      - |
        echo "Current version: $(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)"
    silent: true

  version:bump:patch:
    desc: Bump patch version (e.g., 0.1.0 → 0.1.1)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: patch

  version:bump:minor:
    desc: Bump minor version (e.g., 0.1.0 → 0.2.0)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: minor

  version:bump:major:
    desc: Bump major version (e.g., 0.1.0 → 1.0.0)
    cmds:
      - task: _bump
        vars:
          BUMP_TYPE: major

  version:tag:create:
    desc: Create git tag for current version
    cmds:
      - |
        VERSION=$(grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2)
        TAG="v$VERSION"
        
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Error: Tag $TAG already exists"
          exit 1
        fi
        
        if ! git diff-index --quiet HEAD --; then
          echo "Error: You have uncommitted changes. Please commit them first."
          exit 1
        fi
        
        echo "Creating tag $TAG..."
        git tag -a "$TAG" -m "Release version $VERSION"
        echo "✓ Created tag $TAG"
        echo "To push the tag to remote, run: git push origin $TAG"

  _bump:
    internal: true
    vars:
      CURRENT_VERSION:
        sh: grep -E '^version = ' {{.PYPROJECT_FILE}} | cut -d '"' -f 2
    cmds:
      - |
        CURRENT="{{.CURRENT_VERSION}}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        
        case "{{.BUMP_TYPE}}" in
          patch) NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))" ;;
          minor) NEW_VERSION="$MAJOR.$((MINOR + 1)).0" ;;
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
        esac
        
        echo "Bumping version from $CURRENT to $NEW_VERSION..."
        
        # Use perl for cross-platform in-place editing
        perl -i -pe "s/^version = \"[^\"]+\"/version = \"$NEW_VERSION\"/" {{.PYPROJECT_FILE}}
        
        echo "✓ Updated {{.PYPROJECT_FILE}}"
        echo ""
        echo "Next steps:"
        echo "1. Commit changes: git add -A && git commit -m 'chore: bump version to $NEW_VERSION'"
        echo "2. Create tag: task -t Taskfile.semver.yml version:tag:create"
        echo "3. Push changes: git push && git push --tags" 