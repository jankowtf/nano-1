version: '3'

silent: true

vars:
  QUARTO_DIR: docs/quarto
  SITE_DIR: docs/quarto/_site
  ROOT_DIR:
    sh: pwd
  HOME:
    sh: echo $HOME

includes:
  docs: ./taskfiles/Taskfile.docs.yml
  build: ./taskfiles/Taskfile.build.yml
  version: ./taskfiles/Taskfile.version.yml
  dev: ./taskfiles/Taskfile.dev.yml
  workflow: ./taskfiles/Taskfile.workflows.yml
  agentic: ./taskfiles/Taskfile.agentic.yml
  atomic:
    taskfile: ./taskfiles/Taskfile.atomic.yml
    dir: '{{.ROOT_DIR}}'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Core development tasks - namespace:core
  core:dev:setup:
    desc: Set up development environment
    cmds:
      - uv pip install -e ".[dev]"
      - echo "âœ… Development environment ready!"

  core:dev:test:
    desc: Run all tests
    cmds:
      - pytest tests/ -v

  core:dev:test:unit:
    desc: Run unit tests only
    cmds:
      - pytest tests/unit/ -v

  core:dev:test:integration:
    desc: Run integration tests only
    cmds:
      - pytest tests/integration/ -v

  core:dev:test:coverage:
    desc: Run tests with coverage report
    cmds:
      - pytest tests/ --cov=nanobricks --cov-report=html --cov-report=term

  core:dev:lint:
    desc: Run linters (ruff + mypy)
    cmds:
      - ruff check src/ tests/
      - mypy src/

  core:dev:format:
    desc: Format code
    cmds:
      - ruff format src/ tests/
      - black src/ tests/

  core:dev:typecheck:
    desc: Run strict type checking
    cmds:
      - mypy src/ --strict

  core:dev:all:
    desc: Run all checks (lint, test, docs)
    cmds:
      - task: core:dev:lint
      - task: core:dev:test
      - task: docs:site:render

  core:dev:watch:test:
    desc: Watch files and run tests on change
    cmds:
      - watchexec -e py -w src -w tests -- uv run pytest tests/ -v

  # Scaffold tasks - namespace:scaffold  
  scaffold:brick:create:
    desc: Create a new nanobrick component
    vars:
      BRICK_NAME: '{{.NAME | default "my_brick"}}'
    cmds:
      - mkdir -p src/{{.BRICK_NAME}}
      - |
        cat > src/{{.BRICK_NAME}}/__init__.py << 'EOF'
        """{{.BRICK_NAME}} - A Nanobrick component"""
        
        from .core import {{.BRICK_NAME | title}}Brick
        
        __all__ = ["{{.BRICK_NAME | title}}Brick"]
        EOF
      - |
        cat > src/{{.BRICK_NAME}}/core.py << 'EOF'
        from typing import TypeVar, Generic
        from nanobricks import Nanobrick
        
        InputT = TypeVar('InputT')
        OutputT = TypeVar('OutputT')
        
        class {{.BRICK_NAME | title}}Brick(Nanobrick[InputT, OutputT]):
            """{{.BRICK_NAME | title}} nanobrick implementation"""
            
            name = "{{.BRICK_NAME}}"
            version = "0.1.0"
            
            async def invoke(self, input: InputT) -> OutputT:
                # Implement your logic here
                return input
        EOF

  # Quick aliases (backwards compatibility)
  test:
    desc: Alias for core:dev:test
    cmds:
      - task: core:dev:test

  lint:
    desc: Alias for core:dev:lint
    cmds:
      - task: core:dev:lint

  format:
    desc: Alias for core:dev:format
    cmds:
      - task: core:dev:format